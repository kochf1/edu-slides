%%
%% Copyright 2024 Fernando Koch
%% edu-style.sty, Latex style for Simple Education Slides.
%%
%% v0.5 Complete re-work of slide templates and composition logic
%% v0.4 Fixes and small improvements
%% v0.3 Add support to 'diagram', improved parameter passing, added new templates (slideDefinitions, slideProgress, slideEvolution)
%% v0.2 Improved Image and Text file handling capabilities 
%% v0.1 Initial Release
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   https://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008 or later.
%
% This work has the LPPL maintenance status `maintained'.
% Documentation and Getting Started:
%   https://github.com/kochf1/edu-slides
%
% Disclaimer: 
% Generative AI has been used to help developing this package.
%

\ProvidesPackage{edu-slides}
\RequirePackage[absolute,overlay]{textpos}
\RequirePackage[rgb]{xcolor} 
\RequirePackage{adjustbox}
\RequirePackage{ifthen} 
\RequirePackage{pgffor}
\RequirePackage{pgfkeys}
\RequirePackage{xstring}
\RequirePackage[none]{hyphenat}
\RequirePackage{datetime2}
\RequirePackage{avant}

\usepackage{tikz}
\usepackage{pgf-pie}
\usetikzlibrary{shapes,positioning,arrows,calc}
\usetikzlibrary{shapes.geometric, decorations.pathreplacing, arrows.meta}
\usetikzlibrary{shapes.multipart}
\usetikzlibrary{graphs.standard}

%%%
%%%  GLOBAL PARAMETERS
%%%  This block of key-value parameters can be Copy&Paste into your document
%%%  and modified for the purpose of your slides.
%%%  Check the main.tex template provided with this package.
%%%

\pgfkeys{
    /params/.is family,
    /params/.cd,
        % Logo
        logo/.initial           = logos/fau-logo.png,
    %
        % Banner
        banner/.initial         = logos/fau-banner.png,
    % 
        author/.initial         = define author name,
        author/email/.initial   = define author email,
        author/url/.initial     = ,
    % 
        % Course
        course/.initial         = define course title,
        course/code/.initial    = define course code,
        course/logo/.initial    = ./logos/cen4010-logo.png,
    %
        % Text
        text/.initial             = {.tex, .tikz}, % File extensions to try for Text
        text/locations/.initial   = {., ./texts, ./diagrams}, % Folder locations to look for Text
    %
        % Images
        image/.initial             = {,.png, .jpg}, % File extensions to try for Image
        image/locations/.initial   = {., ./images, ./logos, ./stock}, % Folder locations to look for Image
    %
        % Debug
        debug/layout/.initial   = false,    %% mark positions, so you can adjust the layouts
        debug/import/.initial   = false,     %% detail process of finding and importing files
        debug/time/.initial     = true,     %% add marker with time of compilation on Cover and BackCover
}

%%%
%%% COLORS
%%% Define the default colors for the template.
%%% You can define your own colors on your document and setup 
%%% the default colors by calling :
%%%     layoutDefaultColors{text}{bullets}
%%%

\definecolor{fau-blue}{RGB}{0, 51, 102}
\definecolor{fau-red}{RGB}{204, 0, 0}
\definecolor{fau-silver}{RGB}{77, 76, 85}
\definecolor{fau-gray}{RGB}{204, 204, 204}
\colorlet{fau-shade}{fau-blue!10}

\newcommand{\defaultColor}{fau-blue}

%% @doc Configure colors for Text and Bullets
%% params: text{1}, bullets{2}
\newcommand{\layoutDefaultColors}[2]{
    \renewcommand{\defaultColor}{#1}
    \AtBeginDocument{\color{#1}}
    \setbeamercolor{normal text}{fg=#1}
    \setbeamercolor{itemize item}{fg=#2}
}

\layoutDefaultColors{fau-blue}{fau-red}


%%%
%%% FONTS
%%% Define the default fonts for the template.
%%%

\pgfkeys{
    /font/.is family,
    /font/.cd,
        % Tiny
        tiny/size/.initial   = 5,
        tiny/space/.initial  = 5,
    %
        % Small
        small/size/.initial  = 8,
        small/space/.initial = 8,
    %
        % Body
        body/size/.initial   = 9,
        body/space/.initial  = 10,
    %
        % Section
        h3/size/.initial   = 11,
        h3/space/.initial  = 10,
    %
        % Section
        h2/size/.initial   = 13,
        h2/space/.initial  = 10,
    %
        % Section
        h1/size/.initial   = 16,
        h1/space/.initial  = 12,
    %
        % Section
        section/size/.initial   = 14,
        section/space/.initial  = 12,
    %
        % Title
        title/size/.initial  = 18,
        title/space/.initial = 20,
    %
        % large
        large/size/.initial  = 24,
        large/space/.initial = 26,
    %
        % larger
        larger/size/.initial  = 30,
        larger/space/.initial = 32,
    %
        % Big
        big/size/.initial    = 40,
        big/space/.initial   = 38
}

%%%
%%% LAYOUT MAKER
%%%

% Set page dimensions
\geometry{paperwidth=16cm, paperheight=9cm}
\setlength{\textwidth}{16cm}
\setlength{\textheight}{9cm}

% Define paddings and key positions
\pgfkeys{
    /anchor/.is family,
    /anchor/.cd,
%
    page/x/.initial = 0.1cm,
    page/y/.initial = 0.0cm,
    page/width/.initial = 15.8cm,
    page/height/.initial = 9.0cm,
%
    header/x/.initial = 0.2cm,
    header/y/.initial = 0.1cm,
    header/width/.initial = 15.2cm,
    header/height/.initial = 1.3cm,
%
    body/x/.initial = \pgfkeysvalueof{/anchor/header/x},
    body/y/.initial = 1.6cm,
    body/width/.initial = \pgfkeysvalueof{/anchor/header/width},
    body/height/.initial = 6.2cm,
%
    footer/x/.initial = \pgfkeysvalueof{/anchor/header/x},
    footer/y/.initial = 8.2cm,
    footer/width/.initial = \pgfkeysvalueof{/anchor/header/width},
    footer/height/.initial = 0.7cm,
}

% Define keys and their defaults
\pgfkeys{
    /layoutParams/.is family,
    /layoutParams/.cd,
    type/.initial=text,             % Element type (text, image, ...)
    target/.initial=body,           % Target block (header, body, footer)
    slicesH/.initial=1,             % Number of horizontal slices
    slicesV/.initial=1,             % Number of vertical slices
    targetH/.initial=1,             % Target horizontal slice
    targetV/.initial=1,             % Target vertical slice
    mergeH/.initial=1,              % Number of horizontal slices to merge
    mergeV/.initial=1,              % Number of vertical slices to merge,
    padL/.initial=0.0cm,            % Padding at the left
    padR/.initial=0.0cm,            % Padding at the right
    padT/.initial=0.0cm,            % Padding at the top
    padB/.initial=0.0cm,            % Padding at the bottom
    halign/.initial=c,              % Horizontal alignment
    valign/.initial=c,              % Vertical alignment
    font/.initial=body,             % font-style (for objects with Text)
    color/.initial=\defaultColor,   % font-color (for objects with Text)
    keepaspect/.initial=true,       % keep aspect ratio (for Image objects)
}

% internal command
\newcommand{\resetLayoutParams}{ 
    \pgfkeyssetvalue{/layoutParams/type}{text}%
    \pgfkeyssetvalue{/layoutParams/target}{body}%
    \pgfkeyssetvalue{/layoutParams/slicesH}{1}%
    \pgfkeyssetvalue{/layoutParams/slicesV}{1}%
    \pgfkeyssetvalue{/layoutParams/targetH}{1}%
    \pgfkeyssetvalue{/layoutParams/targetV}{1}%
    \pgfkeyssetvalue{/layoutParams/mergeH}{1}%
    \pgfkeyssetvalue{/layoutParams/mergeV}{1}%
    \pgfkeyssetvalue{/layoutParams/padL}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/padR}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/padT}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/padB}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/halign}{c}%
    \pgfkeyssetvalue{/layoutParams/valign}{c}%
    \pgfkeyssetvalue{/layoutParams/font}{body}%
    \pgfkeyssetvalue{/layoutParams/color}{\defaultColor}%
    \pgfkeyssetvalue{/layoutParams/keepaspect}{true}%
}
\resetLayoutParams


% internal command
\newcommand{\internalOutline}[5]{ 
    \begin{minipage}[#4][#2]{#1}%
        \ifthenelse{\equal{#3}{l}}{\raggedright}{}
        \ifthenelse{\equal{#3}{c}}{\centering}{}
        \ifthenelse{\equal{#3}{r}}{\raggedleft}{}
        #5
    \end{minipage}
}

%% @layout Create the container for any type of Object
%% params: x{1}, y{2}, dx{3}, dy{4}, halign{5}, valign{6}, object{7}
\newcommand{\layoutOutline}[7]{ 
    \pgfkeys{/params/debug/layout/.get=\debug}
    
    \begin{textblock*}{#3}(#1,#2)
        \begin{minipage}{#3}
            \ifthenelse{\boolean{\debug}}{
                \setlength{\fboxsep}{0pt}
                \fbox{\internalOutline{#3}{#4}{#5}{#6}{#7}}
            }{
                \internalOutline{#3}{#4}{#5}{#6}{#7}
            }
        \end{minipage}
    \end{textblock*}
}


%% @layout Create a layout for any type of Object.
%% it is expected that the coordinates have been previously calculated through:
%%      \layoutCalculator{layoutParams}
%% params: layoutParams{1}, object{2}
\newcommand{\layoutCreator}[2]{
    \pgfkeys{/layoutParams/.cd, #1}
    \pgfmathsetlengthmacro{\x}{\pgfkeysvalueof{/layoutParams/coordinate/x}}%
    \pgfmathsetlengthmacro{\y}{\pgfkeysvalueof{/layoutParams/coordinate/y}}%
    \pgfmathsetlengthmacro{\dx}{\pgfkeysvalueof{/layoutParams/coordinate/dx}}%
    \pgfmathsetlengthmacro{\dy}{\pgfkeysvalueof{/layoutParams/coordinate/dy}}%
    \pgfkeys{/layoutParams/halign/.get=\halign}%
    \pgfkeys{/layoutParams/valign/.get=\valign}%

    % Make the layout with the provided Object
    \layoutOutline{\x}{\y}{\dx}{\dy}{\halign}{\valign}{#2}%
}

%% @layout Calculate and load the coordinates for the container
%% params: layoutParams{1}
\newcommand{\layoutCalculator}[1]{% 
    \pgfkeys{/layoutParams/.cd, #1}%

    % Load the target block dimensions and position
    \pgfkeys{/layoutParams/slicesH/.get=\slicesH}%
    \pgfkeys{/layoutParams/slicesV/.get=\slicesV}%
    \pgfkeys{/layoutParams/targetH/.get=\targetH}%
    \pgfkeys{/layoutParams/targetV/.get=\targetV}%
    \pgfkeys{/layoutParams/mergeH/.get=\mergeH}%
    \pgfkeys{/layoutParams/mergeV/.get=\mergeV}%
    \pgfkeys{/layoutParams/padL/.get=\padL}%
    \pgfkeys{/layoutParams/padR/.get=\padR}%
    \pgfkeys{/layoutParams/padT/.get=\padT}%
    \pgfkeys{/layoutParams/padB/.get=\padB}%
    \pgfmathsetlengthmacro{\blockX}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/x}}%
    \pgfmathsetlengthmacro{\blockY}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/y}}%
    \pgfmathsetlengthmacro{\blockWidth}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/width}}%
    \pgfmathsetlengthmacro{\blockHeight}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/height}}%

    % Calculate size of each block
    \pgfmathsetlengthmacro{\blockDX}{((\blockWidth / \slicesH)) - (\padL + \padR) }%
    \pgfmathsetlengthmacro{\blockDY}{((\blockHeight / \slicesV))  - (\padT + \padB)  }%

    % Calculate slice coordinates    
    \pgfmathsetlengthmacro{\x}{(\blockX + (\targetH-1)*\blockDX) + \padL}%
    \pgfmathsetlengthmacro{\y}{(\blockY + (\targetV-1)*\blockDY) + \padT}%

    % Calculate slice dimensions
    \pgfmathsetlengthmacro{\dx}{(\mergeH  * \blockDX) - \padR}%
    \pgfmathsetlengthmacro{\dy}{(\mergeV  * \blockDY) - \padB}%

    % Load coordinates
    \pgfkeyssetvalue{/layoutParams/coordinate/x}{\x}%
    \pgfkeyssetvalue{/layoutParams/coordinate/y}{\y}%
    \pgfkeyssetvalue{/layoutParams/coordinate/dx}{\dx}%
    \pgfkeyssetvalue{/layoutParams/coordinate/dy}{\dy}%
}


%%%
%%% UTILITIES
%%%

%% @layout Import contents from a File of given Type, considering Global Params $type/extensions, $type/locations, $type/completions
%% params: parameters{1}, type{2}, filename{3}
\NewDocumentCommand{\ImportFile}{O{} m m}{%
    \pgfkeys{/params/debug/import/.get=\debug}
    \pgfkeysgetvalue{/params/#2}{\extensions}
    \pgfkeysgetvalue{/params/#2/locations}{\locations}
    \pgfkeysgetvalue{/params/#2/completions}{\completions}

    \global\let\fileFound\empty 

    % Iterate over the extensions and locations to find the file
    \foreach \location in \locations {%
        \foreach \extension in \extensions {%
            \edef\fname{\location/#3\extension}
            \IfStrEq{\debug}{true}{Scanning: \fname \\}{} 
            \IfFileExists{\fname}{
                \IfStrEq{\debug}{true}{FOUND: \fname \\}{}
                \xdef\fileFound{\fname}
            }{}
            \ifx\fileFound\empty{}\else{\breakforeach}\fi
        }
        \ifx\fileFound\empty{}\else{\breakforeach}\fi
    }

    % Handle the output based on the type (image or text)
    \ifx\fileFound\empty
        {File not found: #3 (as #2)}
    \else{
        \IfStrEq{#2}{image}
            {\includegraphics[#1]{\fileFound}}
            {\input{\fileFound}}
    }\fi
}

%%%
%%% SLIDE ELEMENTS
%%%

%% @layout Container for Element box
%% params: layoutParams{1}, element{2}
\newcommand{\layoutElement}[2][]{
    \resetLayoutParams
    \pgfkeys{/layoutParams/.cd, #1}%

    \layoutCalculator{#1}
    \pgfkeys{/layoutParams/type/.get=\thisType}%
    \pgfkeys{/layoutParams/color/.get=\thisColor}%
    \pgfkeys{/font/\pgfkeysvalueof{/layoutParams/font}/size/.get=\thisFontSize}%
    \pgfkeys{/font/\pgfkeysvalueof{/layoutParams/font}/space/.get=\thisFontSpace}%
    \pgfmathsetlengthmacro{\dx}{\pgfkeysvalueof{/layoutParams/coordinate/dx}}%
    \pgfmathsetlengthmacro{\dy}{\pgfkeysvalueof{/layoutParams/coordinate/dy}}%
    
    \IfStrEq{\thisType}{text}{ \layoutCreator{#1}{\fontsize{\thisFontSize}{\thisFontSpace} \selectfont #2} }{}
    \IfStrEq{\thisType}{import}{ \layoutCreator{#1}{\ImportFile[]{text}{#2}} }{}
    \IfStrEq{\thisType}{diagram}{ \layoutCreator{#1, halign=c}{\ImportFile[]{text}{#2}} }{}
    \IfStrEq{\thisType}{image}{ \layoutCreator{#1}{\ImportFile[width=\dx, height=\dy, keepaspectratio]{image}{#2}} }{}
    \IfStrEq{\thisType}{color}
        {   \IfStrEq{#2}{}{\edef\thisColor{fau-blue}}{\edef\thisColor{#2}}
            \begin{textblock*}{\dx}(\x,\y)
            \begingroup 
                \color{\thisColor} \rule{\dx}{\dy}
            \endgroup
           \end{textblock*}
        }{}
}



%%%
%%% PARAMETERS FOR ADVANCED TEMPLATES
%%%

\pgfkeys{
    /slideParams/.is family,
    /slideParams/.cd,
        halign/.initial = c,
        valign/.initial = c,
        link/.initial   =, 
        distribution/.initial = 1/1,
        font/.initial = body,
        font/1/.initial = body,
        font/2/.initial = body,
        font/3/.initial = body,
        font/4/.initial = body,
        type/.initial = text,
        type/1/.initial = text,
        type/2/.initial = text,
        type/3/.initial = text,
        type/4/.initial = text,
        image/.initial  =,
        image/1/.initial = ,
        image/2/.initial = ,
        image/3/.initial = ,
        image/4/.initial = ,
        title/.initial  = ,
        title/1/.initial = ,
        title/2/.initial = ,
        title/3/.initial = ,
        title/4/.initial = ,
        title/5/.initial = ,
        title/6/.initial = ,
        title/7/.initial = ,
        title/8/.initial = ,
        text/1/.initial = ,
        text/2/.initial = ,
        text/3/.initial = ,
        text/4/.initial = ,
        text/5/.initial = ,
        text/6/.initial = ,
        text/7/.initial = ,
        text/8/.initial = ,
}

\newcommand{\resetSlideParams}{
    \pgfkeyssetvalue{/slideParams/distribution}{1/1}%
    \pgfkeyssetvalue{/slideParams/font}{body}%
    \pgfkeyssetvalue{/slideParams/link}{}%
    \pgfkeyssetvalue{/slideParams/halign}{c}%
    \pgfkeyssetvalue{/slideParams/valign}{c}%
    \pgfkeyssetvalue{/slideParams/font/1}{body}%
    \pgfkeyssetvalue{/slideParams/font/2}{body}%
    \pgfkeyssetvalue{/slideParams/font/3}{body}%
    \pgfkeyssetvalue{/slideParams/font/4}{body}%
    \pgfkeyssetvalue{/slideParams/halign}{c}%
    \pgfkeyssetvalue{/slideParams/valign}{c}%
    \pgfkeyssetvalue{/slideParams/type}{text}%
    \pgfkeyssetvalue{/slideParams/type/1}{text}%
    \pgfkeyssetvalue{/slideParams/type/2}{text}%
    \pgfkeyssetvalue{/slideParams/type/3}{text}%
    \pgfkeyssetvalue{/slideParams/type/4}{text}%
    \pgfkeyssetvalue{/slideParams/image}{}%
    \pgfkeyssetvalue{/slideParams/image/1}{}%
    \pgfkeyssetvalue{/slideParams/image/2}{}%
    \pgfkeyssetvalue{/slideParams/image/3}{}%
    \pgfkeyssetvalue{/slideParams/image/4}{}%
    \pgfkeyssetvalue{/slideParams/title}{}%
    \pgfkeyssetvalue{/slideParams/title/1}{}%
    \pgfkeyssetvalue{/slideParams/title/2}{}%
    \pgfkeyssetvalue{/slideParams/title/3}{}%
    \pgfkeyssetvalue{/slideParams/title/4}{}%
    \pgfkeyssetvalue{/slideParams/title/5}{}%
    \pgfkeyssetvalue{/slideParams/title/6}{}%
    \pgfkeyssetvalue{/slideParams/title/7}{}%
    \pgfkeyssetvalue{/slideParams/title/8}{}%
    \pgfkeyssetvalue{/slideParams/text/1}{}%
    \pgfkeyssetvalue{/slideParams/text/2}{}%
    \pgfkeyssetvalue{/slideParams/text/3}{}%
    \pgfkeyssetvalue{/slideParams/text/4}{}%
    \pgfkeyssetvalue{/slideParams/text/5}{}%
    \pgfkeyssetvalue{/slideParams/text/6}{}%
    \pgfkeyssetvalue{/slideParams/text/7}{}%
    \pgfkeyssetvalue{/slideParams/text/8}{}%
}


%%%
%%%  SLIDE ELEMENTS
%%%

%% @layout Add Logo to Top-Left corner
%% params: none
\newcommand{\elementLogo}{
    \layoutElement[type=image, target=header, halign=l]{\pgfkeysvalueof{/params/logo}}
}

%% @layout Add Banner to Bottom-Left corner
%% params: none
\newcommand{\elementBanner}{
    \layoutElement[type=image, target=footer, slicesH=2, halign=l]{\pgfkeysvalueof{/params/banner}}
}

%% @layout Add Title to Header, Full- or Half-size (false) 
%% params:  [slideParams(type=full | half)(title)][1]
\newcommand{\elementTitle}[2][]{
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/type/.get=\titleType}%

    \IfStrEq{\titleType}{left}
        {\layoutElement[type=text, target=header, slicesH=2, targetH=1, halign=l, font=title]{#2}}
    { \IfStrEq{\titleType}{right}
        {\layoutElement[type=text, target=header, slicesH=2, targetH=2, halign=l, font=title]{#2}}
        {\layoutElement[type=text, target=header, halign=l, font=title]{#2}}
    }
}

%% @layout Add Compilation Time marker to Footer
%% params: halign{1}
\newcommand{\elementCompilationTime}[1]{
    \ifthenelse{\boolean{\pgfkeysvalueof{/params/debug/time}}}
        {\layoutElement[type=text, target=footer, halign=#1, valign=b, font=tiny]{Compiled on \today{} at \DTMcurrenttime}}
        {} 
}


%%%
%%%  SLIDE TEMPLATES
%%%


%% @template Cover
%% Open the presentation with a title.
%% Example:
%%      \slideCover{Lesson 1 \\ Introductions}
%% params:  [slideParams(title)][1]
\newcommand{\slideCover}[1]{ 
    \resetSlideParams
    \pgfkeys{/params/course/.get=\course}%
    \pgfkeys{/params/course/code/.get=\courseCode}
    \pgfkeys{/params/course/logo/.get=\courseLogo}
    \pgfkeys{/params/author/.get=\author}
    \pgfkeys{/params/author/email/.get=\email}
    \pgfkeys{/params/author/url/.get=\link}

    \begin{frame}[plain]
        %% Logo
        \elementLogo

        %% If Course Logo is EMPTY, then default to Color Box with \defaultcolor
        \IfStrEq{\courseLogo}{}
           { \layoutElement[type=color, target=page, slicesH=2, targetH=2]{\defaultColor} }
           { \layoutElement[type=image, target=page, slicesH=2, targetH=2]{\courseLogo} }

        %% Course Code & Course Name
        \layoutElement[type=text, target=body, slicesH=2, slicesV=3, targetV=1, halign=l, valign=t, font=body]{\courseCode \\ \course}

        %% Lesson Title
        \layoutElement[type=text, target=body, slicesH=2, slicesV=3, targetV=2, halign=l, font=title]{#1}

        %% Author information
        \layoutElement[type=text, target=body, slicesH=2, slicesV=3, targetV=3, halign=l, valign=b]{\author \\ \email \\ \link}

         %% Compilation time
         \elementCompilationTime{l}

    \end{frame}
}

%% @template Agenda
%% Present the Agenda
%% Example:
%%     \slideAgenda{1. Introduction \\ 2. Main Topics \\ 3. Conclusion} 
%% params: agenda[1]
\newcommand{\slideAgenda}[1]{ 
    \resetSlideParams
    \begin{frame}[plain]
        \elementTitle[type=left]{Agenda}
        \elementBanner
        \layoutElement[type=color, target=page, slicesH=2, targetH=2]{\defaultColor} 
        \layoutElement[type=text, target=body, slicesH=2, targetH=1, halign=l, valign=t]{#1}
    \end{frame}
}

%% @template Back Cover
%% Closing slides at the end of the presentation
%% Example:
%%      \slideBackCover
%% params: none
\newcommand{\slideBackCover}{ 
    \pgfkeys{/params/logo/.get=\logo}
    \pgfkeys{/params/course/.get=\course}
    \pgfkeys{/params/course/code/.get=\courseCode}
    \pgfkeys{/params/author/.get=\author}
    \pgfkeys{/params/author/email/.get=\email}

    \begin{frame}[plain]
        %% Logo on Mid-Page
        \layoutElement[type=image, target=page, slicesH=3, targetH=2, slicesV=3, targetV=2]{\logo}

        %% Course Code & Course Name
        \layoutElement[type=text, target=page, slicesV=3, targetV=3, valign=c]
                {\courseCode~-~\course \\[1\baselineskip] \textbf{\author} \\ \email}
        
        %% Compilation time
        \elementCompilationTime{c}
    \end{frame}
}

%% @template Simple Column
%% Example:
%%      \slideSimple[title=Title]{Body Text}
%%
\newcommand{\slideSimple}[2][]{ 
    \resetSlideParams
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/type/.get=\myType}%
    \pgfkeys{/slideParams/title/.get=\myTitle}%
    \pgfkeys{/slideParams/font/.get=\myFont}%
    \pgfkeys{/slideParams/halign/.get=\paramHAlign}%

    \edef\myTarget{body}
    \edef\myHAlign{\paramHAlign}
    \edef\myVAlign{t}
    \edef\myPadL{0.0cm}
    \edef\myPadR{0.0cm} 

    \begin{frame}[plain]
        \IfStrEq{\myTitle}{}
            {\edef\myTarget{page} \edef\myVAlign{c}}
            { \elementTitle[type=full]{\myTitle} \elementBanner}

        \IfStrEq{\myType}{image}{\edef\myHAlign{c} \edef\myVAlign{c}}{}
        \IfStrEq{\myFont}{body}{}
            {\edef\myHAlign{c} \edef\myVAlign{c} \edef\myPadL{0.3cm} \edef\myPadR{0.3cm} }{}

        \layoutElement[type=\myType, target=\myTarget, halign=\myHAlign, valign=\myVAlign, padL=\myPadL, padR=\myPadR, font=\myFont]{#2}
    \end{frame}
}


%% @template Double Column
%% Example:
%%      \slideDouble[title=Title, type/1=image]{img-1}{Body Text}
%%
\newcommand{\slideDouble}[3][]{ 
    \resetSlideParams
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/distribution/.get=\myDistribution}%
    \pgfkeys{/slideParams/title/.get=\myTitle}%
    \pgfkeys{/slideParams/type/1/.get=\myTypeOne}%
    \pgfkeys{/slideParams/type/2/.get=\myTypeTwo}%
    \pgfkeys{/slideParams/font/.get=\myFont}%
    \pgfkeys{/slideParams/font/1/.get=\myFontOne}%
    \pgfkeys{/slideParams/font/2/.get=\myFontTwo}%

    \edef\myTarget{body}
    \edef\myHAlign{l}
    \edef\myVAlign{t}

    \edef\mySlicesH{2} 
    \edef\myMergeHOne{1} 
    \edef\myTargetHTwo{2} 
    \edef\myMergeHTwo{1}
    \edef\myPadROne{0.0cm}

    \IfStrEq{\myTypeOne\myTypeTwo}{texttext}{}
        {\edef\myFontOne{\myFont} \edef\myFontTwo{\myFont} }

    \IfStrEq{\myFontOne}{body}
        { \edef\myVAlignOne{t} \edef\myHAlignOne{l} }
        { \edef\myVAlignOne{c} \edef\myHAlignOne{l} }

    \IfStrEq{\myFontTwo}{body}
        { \edef\myVAlignTwo{t} \edef\myHAlignTwo{l} }
        { \edef\myVAlignTwo{c} \edef\myHAlignTwo{l} }

    \IfStrEq{\myDistribution}{3/5}{ 
        \edef\mySlicesH{5} 
        \edef\myMergeHOne{2} 
        \edef\myTargetHTwo{3} 
        \edef\myMergeHTwo{3}
        \edef\myPadROne{0.2cm}
    }{
        \IfStrEq{\myDistribution}{5/3}{ 
            \edef\mySlicesH{5} 
            \edef\myMergeHOne{3}
            \edef\myTargetHTwo{4} 
            \edef\myMergeHTwo{2}
            \edef\myPadROne{0.2cm}
        }{}
    }

    \begin{frame}[plain]
        \IfSubStr{,texttext,textdiagram,diagramtext,}{\myTypeOne\myTypeTwo}{
            \IfStrEq{\myTitle}{}{}
            { \elementTitle[type=full]{\myTitle}
              \elementBanner}

            \layoutElement[type=\myTypeOne, target=body, slicesH=\mySlicesH, targetH=1, mergeH=\myMergeHOne, valign=\myVAlignOne, halign=\myHAlignOne, font=\myFontOne, padR=\myPadROne]{#2}
            \layoutElement[type=\myTypeTwo, target=body, slicesH=\mySlicesH, targetH=\myTargetHTwo, mergeH=\myMergeHTwo, halign=l, valign=\myVAlignTwo, font=\myFontTwo]{#3}
        }{}
        \IfSubStr{,imagetext, imagediagram, imageimport,}{\myTypeOne\myTypeTwo}{
            \IfStrEq{\myTitle}{}
                { \edef\myTargetText{page} \edef\myVAlignTwo{c}}
                { \edef\myTargetText{body}  \elementTitle{\myTitle}}
            \layoutElement[type=image, target=body, slicesH=\mySlicesH, targetH=1, mergeH=\myMergeHOne, valign=c, halign=c, padR=0.3cm]{#2}
            \layoutElement[type=\myTypeTwo, target=\myTargetText, slicesH=\mySlicesH, targetH=\myTargetHTwo, mergeH=\myMergeHTwo, halign=l, valign=\myVAlignTwo,  font=\myFontTwo]{#3}
        }{}
        \IfSubStr{,textimage, diagramimage, importimage,}{\myTypeOne\myTypeTwo}{
            \IfStrEq{\myTitle}{}
                { \edef\myTargetText{page} \edef\myVAlignTwo{c} }
                { \edef\myTargetText{body}  \elementTitle{\myTitle} \elementBanner}
            \layoutElement[type=\myTypeOne, target=\myTargetText, slicesH=\mySlicesH, targetH=1, mergeH=\myMergeHOne, halign=\myHAlignTwo, valign=\myVAlignTwo, font=\myFontOne, padR=0.1cm]{#2}
            \layoutElement[type=image, target=body, slicesH=\mySlicesH, targetH=\myTargetHTwo, mergeH=\myMergeHTwo, valign=c, halign=c]{#3}
        }{}
        \IfStrEq{\myTypeOne\myTypeTwo}{imageimage}{
            \IfStrEq{\myTitle}{}{}
            { \elementTitle[type=full]{\myTitle}
              \elementBanner}
            \layoutElement[type=image, target=body, slicesH=2, targetH=1, halign=l, valign=c, padR=0.2cm]{#2}
            \layoutElement[type=image, target=body, slicesH=2, targetH=2, halign=l, valign=c, padL=0.2cm]{#3}
        }{}
    \end{frame}
}

%% @template Divider
%% Template for Section Dividers
%% Example:
%%      \slideDivider{Title}
%% params:  title[1]
\newcommand{\slideDivider}[1]{ 
    \resetSlideParams
    
    \begin{frame}[plain]
    \layoutElement[type=text, target=page, slicesV=3, targetV=2, font=large, padL=0.4cm, halign=l]{#1} 
    \end{frame}
}

%% @template QA (Quote (Top) + Text)
%% Present a larger quote on top with supporting text at the bottom
%% Example:
%%      \slideQA[question=Could this really work?, answer=A: It all depends}
%% params: question[1], answer[2]
\newcommand{\slideQA}[2]{ 
    \resetSlideParams

    \begin{frame}[plain]
    \layoutElement[type=text, target=page, slicesV=3, targetV=1, mergeV=2, font=larger, valign=c]{#1}
    \layoutElement[type=text, target=page, slicesV=3, targetV=3, font=title]{#2}
    \elementBanner
    \end{frame}
}

%% @template Double Column Forcing 3/5 or 5/3 explation
%% Example:
%%      \slideExplanation[type=reversed, title=Title, type/1=image]{img-1}{Body Text}
%%
\newcommand{\slideExplanation}[3][]{
    \resetSlideParams
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/type/.get=\expDistribution}%

    \IfStrEq{\expDistribution}{reversed}{
        \slideDouble[#1, distribution=3/5]{#2}{#3}
    }{
        \slideDouble[#1, distribution=5/3]{#2}{#3}
    }
}


%% @template Literature (Big Image (left) + Text + Link)
%% Showcase a larger image on the left, text on the top-right, and a link in the bottom-right
%% Example:
%%      \slideLiterature[title=Title, image=book-cover, link=http://somewhere.com/book]{book-chapters}
%% params: [slideParams(image, link, title}[1], text{2}
\newcommand{\slideLiterature}[2][]{ 
    \resetSlideParams
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/image/.get=\myImage}%
    \pgfkeys{/slideParams/link/.get=\myLink}%
    \pgfkeys{/slideParams/title/.get=\myTitle}%

    \begin{frame}[plain]
    \layoutElement[type=image, target=page, slicesH=2, targetH=1, halign=l]{\myImage} 
    \layoutElement[type=text, target=footer, slicesH=2, targetH=2, font=small]{\myLink} 
    \layoutElement[type=text, target=header, slicesH=2, targetH=2, halign=l, font=h2]{\myTitle} 
    \layoutElement[type=text, target=body, slicesH=2, targetH=2, valign=t, padT=0.4cm, valign=t, font=body]{#2} 
    \end{frame}
}

%% @template Template for Progress (dimensions 2 to 8)
%% Example:
%%      \slideProgress[type=text, title=Title, title/1=Title1, ..., title/N=TitleN, text/1=!text-1, ..., text/n=!text-n]
%% params: slideParams{1}
\newcommand{\slideProgress}[1][]{ 
    \resetSlideParams
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/title/.get=\myTitle}%
    \pgfkeys{/slideParams/type/.get=\myType}%
    \pgfkeys{/slideParams/color/.get=\myColor}%
    \pgfkeys{/slideParams/font/.get=\myFont}%
    \global\let\partCount\empty

    \foreach \x in {1,2,3,4,5,6,7,8}{%
        \pgfkeys{/slideParams/title/\x/.get=\thisTitle}
        \ifx\thisTitle\empty{\breakforeach}\else{\xdef\partCount{\x}}\fi
    }

    \begin{frame}[plain]
        \elementTitle{\myTitle}

        \foreach \i in {1,...,\partCount}{
            \pgfkeys{/slideParams/title/\i/.get=\localTitle}%
            \pgfkeys{/slideParams/text/\i/.get=\localText}%

            \IfStrEq{\myType}{text}{%
                \layoutElement[type=text, target=body, slicesV=5, targetV=2, slicesH=\partCount, targetH=\i, font=\myFont]{\localTitle, padL=0.1cm, padR=0.05cm}
            }{
                \layoutElement[type=image, target=body, slicesV=5, targetV=1, mergeV=2, slicesH=\partCount, targetH=\i, valign=t, padB=0.1cm, padL=0.1cm, padR=0.05cm]{\localTitle}
            }
            \layoutElement[type=text, target=body, slicesV=5, targetV=3, mergeV=3, slicesH=\partCount, targetH=\i, valign=t, padL=0.1cm, padR=0.05cm]{\pgfkeys{/slideParams/text/\i}}
        }    
   
        \elementBanner
        \end{frame}
}


%%%
%%% PREDEFINED UTILITIES
%%%

\newcommand{\SPACER}[1][1]{\vspace{#1\baselineskip}}

\newcommand{\PIE}[2][]{
    \begin{tikzpicture}
        \pie[#1, sum=auto, explode=0.15, after number = \%, color={fau-blue!50, fau-blue!30, fau-blue!20, fau-blue!10}]{#2}
    \end{tikzpicture}
}


\newcommand{\MAPPING}[1][]{
    \resetSlideParams
    \pgfkeys{/slideParams/.cd, #1}
    \pgfkeys{/slideParams/type/.get=\myType}%
    \pgfkeys{/slideParams/title/.get=\myTitle}%

    \global\let\partCount\empty

    \foreach \x in {1,2,3,4,5,6,7,8}{%
        \pgfkeys{/slideParams/title/\x/.get=\thisTitle}
        \ifx\thisTitle\empty{\breakforeach}\else{\xdef\partCount{\x}}\fi
    }
    
    \begin{tikzpicture}[stack/.style={
        rectangle split, rectangle split parts=\partCount, draw, anchor=center},
        myarrow/.style={single arrow, draw=none}]

        \IfStrEq{\myType}{text}{
            \node [rectangle,align=center,fill=fau-blue!30, minimum width=3cm, minimum height=3cm] (desc){\myTitle};
            
            \node [stack,nodes=6,right=of desc] (items) {
                \pgfkeys{/slideParams/title/1}
                \nodepart{two}\pgfkeys{/slideParams/title/2}
                \nodepart{three}\pgfkeys{/slideParams/title/3}
                \nodepart{four}\pgfkeys{/slideParams/title/4}
                \nodepart{five}\pgfkeys{/slideParams/title/5}
                \nodepart{six}\pgfkeys{/slideParams/title/6}
                \nodepart{seven}\pgfkeys{/slideParams/title/7}
                \nodepart{eight}\pgfkeys{/slideParams/title/8}
            };

            \node [myarrow,draw,anchor=west] at ($(desc.east)+(2.5pt,0)$) {\phantom{te}} ;
         }{
            \node [stack,nodes=6] (items) {
                \pgfkeys{/slideParams/title/1}
                \nodepart{two}\pgfkeys{/slideParams/title/2}
                \nodepart{three}\pgfkeys{/slideParams/title/3}
                \nodepart{four}\pgfkeys{/slideParams/title/4}
                \nodepart{five}\pgfkeys{/slideParams/title/5}
                \nodepart{six}\pgfkeys{/slideParams/title/6}
                \nodepart{seven}\pgfkeys{/slideParams/title/7}
                \nodepart{eight}\pgfkeys{/slideParams/title/8}
            };

            \node [right=of items, rectangle,align=center,fill=fau-blue!30, minimum width=3cm, minimum height=3cm] (desc){\myTitle};
            
            \node [myarrow,draw,anchor=west] at ($(items.east)+(2.5pt,0)$) {\phantom{te}} ;
        }

    \end{tikzpicture}
}
