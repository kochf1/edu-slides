%%
%% Copyright 2024 Fernando Koch
%% edu-style.sty, Latex style for Simple Education Slides.
%%
%% v0.3.1 Bug fix: error handling embedded commands
%% v0.3 Add support to 'diagram', improved parameter passing, added new templates (slideDefinitions, slideProgress, slideEvolution)
%% v0.2 Improved Image and Text file handling capabilities 
%% v0.1 Initial Release
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   https://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008 or later.
%
% This work has the LPPL maintenance status `maintained'.
% Documentation and Getting Started:
%   https://github.com/kochf1/edu-slides
%
% Disclaimer: 
% Diverse Generative AI models have been applied during the development of 
% this application.
%

\ProvidesPackage{edu-slides}
\RequirePackage[absolute,overlay]{textpos}
\RequirePackage[rgb]{xcolor} 
\RequirePackage{adjustbox}
\RequirePackage{ifthen} 
\RequirePackage{pgffor}
\RequirePackage{pgfkeys}
\RequirePackage{xstring}
\RequirePackage[none]{hyphenat}
\RequirePackage{datetime2}
\RequirePackage{avant}

\usepackage{tikz}
\usetikzlibrary{shapes.geometric, decorations.pathreplacing, arrows.meta}
\usetikzlibrary {graphs.standard}

%%%
%%%  GLOBAL PARAMETERS
%%%  This block of key-value parameters can be Copy&Paste into your document
%%%  and modified for the purpose of your slides.
%%%  Check the main.tex template provided with this package.
%%%

\pgfkeys{
    /params/.is family,
    /params/.cd,
        % Logo
        logo/.initial           = logos/fau-logo.png,
    %
        % Banner
        banner/.initial         = logos/fau-banner.png,
    % 
        author/.initial         = define author name,
        author/email/.initial   = define author email,
        author/url/.initial     = ,
    % 
        % Course
        course/.initial         = define course title,
        course/code/.initial    = define course code,
        course/logo/.initial    = ./logos/cen4010-logo.png,
    %
        % Text
        text/.initial             = {.tex, .tikz}, % File extensions to try for Text
        text/locations/.initial   = {., ./texts, ./diagrams}, % Folder locations to look for Text
    %
        % Images
        image/.initial             = {,.png, .jpg}, % File extensions to try for Image
        image/locations/.initial   = {., ./images, ./logos, ./stock}, % Folder locations to look for Image
    %
        % Debug
        debug/layout/.initial   = false,    %% mark positions, so you can adjust the layouts
        debug/import/.initial   = false,     %% detail process of finding and importing files
        debug/time/.initial     = true,     %% add marker with time of compilation on Cover and BackCover
}

%%%
%%% COLORS
%%% Define the default colors for the template.
%%% You can define your own colors on your document and setup 
%%% the default colors by calling :
%%%     layoutDefaultColors{text}{bullets}
%%%

\definecolor{fau-blue}{RGB}{0, 51, 102}
\definecolor{fau-red}{RGB}{204, 0, 0}
\definecolor{fau-silver}{RGB}{77, 76, 85}
\definecolor{fau-gray}{RGB}{204, 204, 204}
\colorlet{fau-shade}{fau-blue!10}

\newcommand{\defaultColor}{fau-blue}

%% @doc Configure colors for Text and Bullets
%% params: text{1}, bullets{2}
\newcommand{\layoutDefaultColors}[2]{
    \renewcommand{\defaultColor}{#1}
    \AtBeginDocument{\color{#1}}
    \setbeamercolor{normal text}{fg=#1}
    \setbeamercolor{itemize item}{fg=#2}
}

\layoutDefaultColors{fau-blue}{fau-red}


%%%
%%% FONTS
%%% Define the default fonts for the template.
%%%

\pgfkeys{
    /font/.is family,
    /font/.cd,
        % Tiny
        tiny/size/.initial   = 5,
        tiny/space/.initial  = 5,
    %
        % Small
        small/size/.initial  = 8,
        small/space/.initial = 8,
    %
        % Body
        body/size/.initial   = 9,
        body/space/.initial  = 10,
    %
        % Section
        h3/size/.initial   = 11,
        h3/space/.initial  = 10,
    %
        % Section
        h2/size/.initial   = 13,
        h2/space/.initial  = 10,
    %
        % Section
        h1/size/.initial   = 16,
        h1/space/.initial  = 12,
    %
        % Section
        section/size/.initial   = 14,
        section/space/.initial  = 12,
    %
        % Title
        title/size/.initial  = 18,
        title/space/.initial = 20,
    %
        % large
        large/size/.initial  = 24,
        large/space/.initial = 26,
    %
        % larger
        larger/size/.initial  = 30,
        larger/space/.initial = 32,
    %
        % Big
        big/size/.initial    = 40,
        big/space/.initial   = 38
}

%%%
%%% LAYOUT MAKER
%%%

% Set page dimensions
\geometry{paperwidth=16cm, paperheight=9cm}
\setlength{\textwidth}{16cm}
\setlength{\textheight}{9cm}

% Define paddings and key positions
\pgfkeys{
    /anchor/.is family,
    /anchor/.cd,
%
    page/x/.initial = 0.0cm,
    page/y/.initial = 0.0cm,
    page/width/.initial = 16.0cm,
    page/height/.initial = 9.0cm,
%
    header/x/.initial = 0.2cm,
    header/y/.initial = 0.1cm,
    header/width/.initial = 15.2cm,
    header/height/.initial = 1.3cm,
%
    body/x/.initial = \pgfkeysvalueof{/anchor/header/x},
    body/y/.initial = 1.6cm,
    body/width/.initial = \pgfkeysvalueof{/anchor/header/width},
    body/height/.initial = 6.2cm,
%
    footer/x/.initial = \pgfkeysvalueof{/anchor/header/x},
    footer/y/.initial = 8.2cm,
    footer/width/.initial = \pgfkeysvalueof{/anchor/header/width},
    footer/height/.initial = 0.7cm,
}

% Define keys and their defaults
\pgfkeys{
    /layoutParams/.is family,
    /layoutParams/.cd,
    target/.initial=body,           % Target block (header, body, footer)
    slicesH/.initial=1,             % Number of horizontal slices
    slicesV/.initial=1,             % Number of vertical slices
    targetH/.initial=1,             % Target horizontal slice
    targetV/.initial=1,             % Target vertical slice
    mergeH/.initial=1,              % Number of horizontal slices to merge
    mergeV/.initial=1,              % Number of vertical slices to merge,
    padL/.initial=0.0cm,            % Padding at the left
    padR/.initial=0.0cm,            % Padding at the right
    padT/.initial=0.0cm,            % Padding at the top
    padB/.initial=0.0cm,            % Padding at the bottom
    halign/.initial=c,              % Horizontal alignment
    valign/.initial=c,              % Vertical alignment
    font/.initial=body,             % font-style (for objects with Text)
    color/.initial=\defaultColor,   % font-color (for objects with Text)
    keepaspect/.initial=true,       % keep aspect ratio (for Image objects)
    half/.initial=false             % generic designation if this layout should be half-ed
}

% internal command
\newcommand{\resetLayoutParams}{ 
    \pgfkeyssetvalue{/layoutParams/slicesH}{1}%
    \pgfkeyssetvalue{/layoutParams/slicesV}{1}%
    \pgfkeyssetvalue{/layoutParams/targetH}{1}%
    \pgfkeyssetvalue{/layoutParams/targetV}{1}%
    \pgfkeyssetvalue{/layoutParams/mergeH}{1}%
    \pgfkeyssetvalue{/layoutParams/mergeV}{1}%
    \pgfkeyssetvalue{/layoutParams/halign}{c}%
    \pgfkeyssetvalue{/layoutParams/valign}{c}%
    \pgfkeyssetvalue{/layoutParams/padL}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/padR}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/padT}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/padB}{0.0cm}%
    \pgfkeyssetvalue{/layoutParams/valign}{c}%
    \pgfkeyssetvalue{/layoutParams/font}{body}%
    \pgfkeyssetvalue{/layoutParams/color}{\defaultColor}%
    \pgfkeyssetvalue{/layoutParams/keepaspect}{true}%
    \pgfkeyssetvalue{/layoutParams/half}{false}%
}
\resetLayoutParams


% internal command
\newcommand{\internalOutline}[5]{ 
    \begin{minipage}[#4][#2]{#1}%
        \ifthenelse{\equal{#3}{l}}{\raggedright}{}
        \ifthenelse{\equal{#3}{c}}{\centering}{}
        \ifthenelse{\equal{#3}{r}}{\raggedleft}{}
        #5
    \end{minipage}
}

%% @layout Create the container for any type of Object
%% params: x{1}, y{2}, dx{3}, dy{4}, halign{5}, valign{6}, object{7}
\newcommand{\layoutOutline}[7]{ 
    \pgfkeys{/params/debug/layout/.get=\debug}
    
    \begin{textblock*}{#3}(#1,#2)
        \begin{minipage}{#3}
            \ifthenelse{\boolean{\debug}}{
                \setlength{\fboxsep}{0pt}
                \fbox{\internalOutline{#3}{#4}{#5}{#6}{#7}}
            }{
                \internalOutline{#3}{#4}{#5}{#6}{#7}
            }
        \end{minipage}
    \end{textblock*}
}


%% @layout Create a layout for any type of Object.
%% it is expected that the coordinates have been previously calculated through:
%%      \layoutCalculator{layoutParams}
%% params: layoutParams{1}, object{2}
\newcommand{\layoutCreator}[2]{
    \pgfkeys{/layoutParams/.cd, #1}
    \pgfmathsetlengthmacro{\x}{\pgfkeysvalueof{/layoutParams/coordinate/x}}%
    \pgfmathsetlengthmacro{\y}{\pgfkeysvalueof{/layoutParams/coordinate/y}}%
    \pgfmathsetlengthmacro{\dx}{\pgfkeysvalueof{/layoutParams/coordinate/dx}}%
    \pgfmathsetlengthmacro{\dy}{\pgfkeysvalueof{/layoutParams/coordinate/dy}}%
    \pgfkeys{/layoutParams/halign/.get=\halign}%
    \pgfkeys{/layoutParams/valign/.get=\valign}%

    % Make the layout with the provided Object
    \layoutOutline{\x}{\y}{\dx}{\dy}{\halign}{\valign}{#2}%
}

%% @layout Calculate and load the coordinates for the container
%% params: layoutParams{1}
\newcommand{\layoutCalculator}[1]{% 
    \pgfkeys{/layoutParams/.cd, #1}%

    % Load the target block dimensions and position
    \pgfkeys{/layoutParams/slicesH/.get=\slicesH}%
    \pgfkeys{/layoutParams/slicesV/.get=\slicesV}%
    \pgfkeys{/layoutParams/targetH/.get=\targetH}%
    \pgfkeys{/layoutParams/targetV/.get=\targetV}%
    \pgfkeys{/layoutParams/mergeH/.get=\mergeH}%
    \pgfkeys{/layoutParams/mergeV/.get=\mergeV}%
    \pgfkeys{/layoutParams/padL/.get=\padL}%
    \pgfkeys{/layoutParams/padR/.get=\padR}%
    \pgfkeys{/layoutParams/padT/.get=\padT}%
    \pgfkeys{/layoutParams/padB/.get=\padB}%
    \pgfmathsetlengthmacro{\blockX}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/x}}%
    \pgfmathsetlengthmacro{\blockY}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/y}}%
    \pgfmathsetlengthmacro{\blockWidth}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/width}}%
    \pgfmathsetlengthmacro{\blockHeight}{\pgfkeysvalueof{/anchor/\pgfkeysvalueof{/layoutParams/target}/height}}%

    % Calculate size of each block
    \pgfmathsetlengthmacro{\blockDX}{((\blockWidth / \slicesH)) - (\padL + \padR) }%
    \pgfmathsetlengthmacro{\blockDY}{((\blockHeight / \slicesV))  - (\padT + \padB)  }%

    % Calculate slice coordinates    
    \pgfmathsetlengthmacro{\x}{(\blockX + (\targetH-1)*\blockDX + (\targetH-1)*0.0cm) + \padL}%
    %\pgfmathsetlengthmacro{\x}{(\blockX + (\targetH-1)*\blockDX + (\targetH-1)*0.4cm) + \padL}%
    \pgfmathsetlengthmacro{\y}{(\blockY + (\targetV-1)*\blockDY + (\targetV-1)*0.0cm) + \padT}%
    %\pgfmathsetlengthmacro{\y}{(\blockY + (\targetV-1)*\blockDY + (\targetV-1)*0.1cm) + \padT}%

    % Calculate slice dimensions
    \pgfmathsetlengthmacro{\dx}{(\mergeH  * \blockDX) - \padR}%
    \pgfmathsetlengthmacro{\dy}{(\mergeV  * \blockDY) - \padB}%

    % Load coordinates
    \pgfkeyssetvalue{/layoutParams/coordinate/x}{\x}%
    \pgfkeyssetvalue{/layoutParams/coordinate/y}{\y}%
    \pgfkeyssetvalue{/layoutParams/coordinate/dx}{\dx}%
    \pgfkeyssetvalue{/layoutParams/coordinate/dy}{\dy}%
}


%%%
%%% UTILITIES
%%%

%% @layout Import CSV
%% params: parameters{1},filename{3}
\NewDocumentCommand{\inputTable}{O{} m}{%
    \pgfplotstabletypeset[
        col sep=semicolon, 
        string type, 
        every head row/.style={%
            before row=\toprule,
            after row=\midrule,
        },
            every last row/.style={
            after row=\bottomrule
        }, 
        column type=P{#1}
    ]{#2}
}

%% @layout Import contents from a File of given Type, considering Global Params $type/extensions, $type/locations, $type/completions
%% params: parameters{1}, type{2}, filename{3}
\NewDocumentCommand{\ImportFile}{O{} m m}{%
    \pgfkeys{/params/debug/import/.get=\debug}
    \pgfkeysgetvalue{/params/#2}{\extensions}
    \pgfkeysgetvalue{/params/#2/locations}{\locations}
    \pgfkeysgetvalue{/params/#2/completions}{\completions}

    \global\let\fileFound\empty 

    % Iterate over the extensions and locations to find the file
    \foreach \location in \locations {%
        \foreach \extension in \extensions {%
            \edef\fname{\location/#3\extension}
            \IfStrEq{\debug}{true}{Scanning: \fname \\}{} 
            \IfFileExists{\fname}{
                \IfStrEq{\debug}{true}{FOUND: \fname \\}{}
                \xdef\fileFound{\fname}
            }{}
            \ifx\fileFound\empty{}\else{\breakforeach}\fi
        }
        \ifx\fileFound\empty{}\else{\breakforeach}\fi
    }

    % Handle the output based on the type (image or text)
    \ifx\fileFound\empty
        {File not found: #3 (as #2)}
    \else{
        \IfStrEq{#2}{image}
            {\includegraphics[#1]{\fileFound}}
            {\IfStrEq{#2}{table}
                {TABLE IMPORT NOT ENABLED!} %% @TODO \inputTable[#1]{\fileFound}
                {\input{\fileFound}}
            } 
    }\fi
}

%%%
%%% SLIDE ELEMENTS
%%%

%% @layout Container for Text Box; text can be loaded from a file as !filename.
%% params: layoutParams{1}, text{2}
\newcommand{\layoutText}[2][]{
    \pgfkeys{/layoutParams/.cd, #1}%

    \resetLayoutParams
    \layoutCalculator{#1}
    \pgfkeys{/layoutParams/color/.get=\myFontColor}%
    \pgfkeys{/font/\pgfkeysvalueof{/layoutParams/font}/size/.get=\myFontSize}%
    \pgfkeys{/font/\pgfkeysvalueof{/layoutParams/font}/space/.get=\myFontSpace}%
    \edef\localText{\detokenize{#2}}

    \IfBeginWith{\localText}{!}{
        \StrGobbleLeft{#2}{1}[\textRef]
        \layoutCreator{#1}{\fontsize{\myFontSize}{\myFontSpace} \selectfont {\ImportFile[]{text}{\textRef}}}
    }
    {
        \layoutCreator{#1}{\fontsize{\myFontSize}{\myFontSpace} \selectfont #2}
    }
}


%% @layout Container for Image Box
%% params: layoutParams{1}, image{2}
\newcommand{\layoutImage}[2][]{
    \pgfkeys{/layoutParams/.cd, #1}%

    \resetLayoutParams
    \layoutCalculator{#1}
    \pgfmathsetlengthmacro{\dx}{\pgfkeysvalueof{/layoutParams/coordinate/dx}}%
    \pgfmathsetlengthmacro{\dy}{\pgfkeysvalueof{/layoutParams/coordinate/dy}}%
    \pgfkeys{/layoutParams/keepaspect/.get=\keepaspect}

    \ifthenelse{\boolean{\keepaspect}}{
        \def\graphicOption{\ImportFile[width=\dx, height=\dy, keepaspectratio]{image}{#2}}
    }{
        \def\graphicOption{\ImportFile[width=\dx, height=\dy]{image}{#2}}
    }
    \layoutCreator{#1}{\graphicOption}
}

%% @layout Container for Colored Box
%% params: layoutParams{1}, color{2}
\newcommand{\layoutColor}[2][]{
    \resetLayoutParams
    \pgfkeys{/layoutParams/.cd, #1}%
    \layoutCalculator{#1}
    \pgfmathsetlengthmacro{\x}{\pgfkeysvalueof{/layoutParams/coordinate/x}}%
    \pgfmathsetlengthmacro{\y}{\pgfkeysvalueof{/layoutParams/coordinate/y}}%
    \pgfmathsetlengthmacro{\dx}{\pgfkeysvalueof{/layoutParams/coordinate/dx}}%
    \pgfmathsetlengthmacro{\dy}{\pgfkeysvalueof{/layoutParams/coordinate/dy}}%
    \begin{textblock*}{\dx}(\x,\y)
        \begingroup 
            \color{#2} \rule{\dx}{\dy}
        \endgroup
    \end{textblock*}
    
}



%%%
%%% PARAMETERS FOR ADVANCED TEMPLATES
%%%

\pgfkeys{
    /templateParams/.is family,
    /templateParams/.cd,
        title/.initial  = ,
        title/1/.initial = ,
        title/2/.initial = ,
        title/3/.initial = ,
        title/4/.initial = ,
        title/5/.initial = ,
        title/6/.initial = ,
        title/7/.initial = ,
        title/8/.initial = ,
        text/1/.initial = ,
        text/2/.initial = ,
        text/3/.initial = ,
        text/4/.initial = ,
        text/5/.initial = ,
        text/6/.initial = ,
        text/7/.initial = ,
        text/8/.initial = ,
        image/.initial  =,
        image/1/.initial = ,
        image/2/.initial = ,
        image/3/.initial = ,
        image/4/.initial = ,
        link/.initial   =, 
        arrow/.initial  = true,
        type/.initial   = text,
        font/.initial   = title,
        color/.initial  = true,
}

\newcommand{\resetTemplateParams}{
    \pgfkeyssetvalue{/templateParams/title}{}%
    \pgfkeyssetvalue{/templateParams/title/1}{}%
    \pgfkeyssetvalue{/templateParams/title/2}{}%
    \pgfkeyssetvalue{/templateParams/title/3}{}%
    \pgfkeyssetvalue{/templateParams/title/4}{}%
    \pgfkeyssetvalue{/templateParams/title/5}{}%
    \pgfkeyssetvalue{/templateParams/title/6}{}%
    \pgfkeyssetvalue{/templateParams/title/7}{}%
    \pgfkeyssetvalue{/templateParams/title/8}{}%
    \pgfkeyssetvalue{/templateParams/text/1}{}%
    \pgfkeyssetvalue{/templateParams/text/2}{}%
    \pgfkeyssetvalue{/templateParams/text/3}{}%
    \pgfkeyssetvalue{/templateParams/text/4}{}%
    \pgfkeyssetvalue{/templateParams/text/5}{}%
    \pgfkeyssetvalue{/templateParams/text/6}{}%
    \pgfkeyssetvalue{/templateParams/text/7}{}%
    \pgfkeyssetvalue{/templateParams/text/8}{}%
    \pgfkeyssetvalue{/templateParams/image}{}%
    \pgfkeyssetvalue{/templateParams/image/1}{}%
    \pgfkeyssetvalue{/templateParams/image/2}{}%
    \pgfkeyssetvalue{/templateParams/image/3}{}%
    \pgfkeyssetvalue{/templateParams/image/4}{}%
    \pgfkeyssetvalue{/templateParams/link}{}%
    \pgfkeyssetvalue{/templateParams/arrow}{true}%
    \pgfkeyssetvalue{/templateParams/type}{text}%
    \pgfkeyssetvalue{/templateParams/font}{title}%
    \pgfkeyssetvalue{/templateParams/color}{true}%
}


%%%
%%%  SLIDE ELEMENTS
%%%

%% @layout Add Logo to Top-Left corner
%% params: none
\newcommand{\elementLogo}{
    \layoutImage[target=header,halign=l]{\pgfkeysvalueof{/params/logo}}
}

%% @layout Add Banner to Bottom-Left corner
%% params: none
\newcommand{\elementBanner}{
    \layoutImage[target=footer, slicesH=2, halign=l]{\pgfkeysvalueof{/params/banner}}
}

%% @layout Add Title to Header, Full- or Half-size (false) 
%% params:  [templateParams(type=full | half)(title)][1]
\newcommand{\elementTitle}[1][]{
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\localType}%
    \pgfkeys{/templateParams/title/.get=\localTitle}%

    \ifthenelse{\equal{\localType}{half}}
        {\layoutText[target=header, slicesH=2, halign=l, font=title]{\localTitle}}
        {\layoutText[target=header, halign=l, font=title]{\localTitle}}
}

%% @layout Add Compilation Time marker to Footer
%% params: halign{1}
\newcommand{\elementCompilationTime}[1]{
    \ifthenelse{\boolean{\pgfkeysvalueof{/params/debug/time}}}
        {\layoutText[target=footer, halign=#1, valign=b, font=tiny]{Compiled on \today{} at \DTMcurrenttime}}
        {} 
}


%%%
%%%  SLIDE TEMPLATES
%%%


%% @template Cover
%% Open the presentation with a title.
%% Example:
%%      \slideCover{Lesson 1 \\ Introductions}
%% params:  [templateParams(title)][1]
\newcommand{\slideCover}[1]{ 
    \resetTemplateParams
    \pgfkeys{/params/course/.get=\course}%
    \pgfkeys{/params/course/code/.get=\courseCode}
    \pgfkeys{/params/course/logo/.get=\courseLogo}
    \pgfkeys{/params/author/.get=\author}
    \pgfkeys{/params/author/email/.get=\email}
    \pgfkeys{/params/author/url/.get=\link}

    \begin{frame}[plain]
        %% Logo
        \elementLogo

        %% Course Logo
        %% If Course Logo is EMPTY, then default to Color Box with \defaultcolor
        \ifthenelse{\equal{\courseLogo}{}}
           { \layoutColor[target=page, slicesH=2, targetH=2]{\defaultColor} }
           { \layoutImage[target=page, slicesH=2, targetH=2]{\courseLogo} }

        %% Course Code & Course Name

        \ifthenelse{\equal{\courseCode}{}}{}
            {\ifthenelse{\equal{\course}{}}{}
             {\layoutText[target=body, slicesH=2, slicesV=3, targetV=1, halign=l, valign=t, font=body]{\courseCode \\ \course}}}

        %% Lesson Title
        \layoutText[target=body, slicesH=2, slicesV=3, targetV=2, halign=l, font=title]{#1}

        %% Author information
        \ifthenelse{\equal{\author}{}}{}
            {\layoutText[target=body, slicesH=2, slicesV=3, targetV=3, halign=l, valign=b]{\author \\ \email \\ \link}}
        
        %% Compilation time
        \elementCompilationTime{l}

    \end{frame}
}

%% @template Agenda
%% Present the Agenda
%% Example:
%%     \slideAgenda{1. Introduction \\ 2. Main Topics \\ 3. Conclusion} 
%% params: agenda[1]
\newcommand{\slideAgenda}[1]{ 
    \resetTemplateParams
    \begin{frame}[plain]
    \elementTitle[type=half, title=Agenda] %% Title
    \layoutColor[target=page, slicesH=2, targetH=2]{\defaultColor} %% Color Box on the Right
    \layoutText[target=body, slicesH=2, targetH=1, halign=l, valign=t]{#1} %% Text on the Left
    \elementBanner
    \end{frame}
}

%% @template Back Cover
%% Closing slides at the end of the presentation
%% Example:
%%      \slideBackCover
%% params: none
\newcommand{\slideBackCover}{ 
    \pgfkeys{/params/logo/.get=\logo}
    \pgfkeys{/params/course/.get=\course}
    \pgfkeys{/params/course/code/.get=\courseCode}
    \pgfkeys{/params/author/.get=\author}
    \pgfkeys{/params/author/email/.get=\email}

    \begin{frame}[plain]
        %% Logo on Mid-Page
        \layoutImage[target=page, slicesH=3, targetH=2, slicesV=3, targetV=2]{\logo}

        %% Course Code & Course Name
        \ifthenelse{\equal{\courseCode}{}}{}
            {\ifthenelse{\equal{\course}{}}{}
            {\layoutText[target=page, slicesV=3, targetV=3, valign=c]
                {\courseCode~-~\course \\[1\baselineskip] \textbf{\author} \\ \email}}}
        
        %% Compilation time
        \elementCompilationTime{c}
    \end{frame}
}


%% @template Teleprompt (Title + Text)
%% Display a title and accompanying full-box text
%% Example:
%%      \slideTeleprompt[type=diagram, title=Title]{Body Text}
%% params:  templateParams(type=text | diagram, title)[1], text[2]
\newcommand{\slideTeleprompt}[2][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \IfStrEq{\myType}{diagram}{ \def\localH{c} \def\localV{c}}{ \def\localH{l} \def\localV{t} }

    \begin{frame}[plain]
        \elementTitle[type=half, title=\myTitle] %% Title
        \layoutText[target=body, halign=\localH, valign=\localV]{#2} %% Text alignment based on optional parameter
        \elementBanner
    \end{frame}
}

%% @template Double (Title + Text + Text)
%% Present a title with two sections of text, one on the left and one on the right
%% When marked as Diagram, it is expecte the diagram will be the first item (left), which will be centered.
%% Example:
%%      \slideDouble[type=diagram, title=Title]{Left Text}{Right Text}
%% params:  templateParams(type=text | diagram, title)[1], textL[2], textR[3]
\newcommand{\slideDouble}[3][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \IfStrEq{\myType}{diagram}{ \def\localH{c} \def\localV{c}}{ \def\localH{l} \def\localV{t} }

    \begin{frame}[plain]
    \elementTitle[type=half, title=\myTitle] %% Title
    \layoutText[target=body, slicesH=2, targetH=1, halign=\localH, valign=\localV]{#2} %% Text on the Left-box
    \layoutText[target=body, slicesH=2, targetH=2, halign=l, valign=t]{#3} %% Text on the Right-box
    \elementBanner
    \end{frame}
}

%% @template TextImage (Title + Text + Image)
%% Combine a title with text on the left and an image on the right
%% Example:
%%      \slideTextImage[title=Title]{Image}{Text}
%% params:  templateParams(type=text | diagram, title)[1], image[2], text[3]
\newcommand{\slideTextImage}[2][]{
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \pgfkeys{/templateParams/image/.get=\myImage}%
    \IfStrEq{\myType}{diagram}{ \def\localH{c} \def\localV{c}}{ \def\localH{l} \def\localV{t} }


    \begin{frame}[plain]
    \elementTitle[type=half, title=\myTitle] %% Title
    \layoutText[target=body, slicesH=2, targetH=1, halign=\localH, valign=\localV]{#2} %% Text on the Left-box
    \layoutImage[target=body, slicesH=2, targetH=2]{\myImage} %% Image on the Right-box
    \elementBanner
    \end{frame}
}

%% @template ImageText (Title + Image + Text)
%% Pair a title with an image on the left and text on the right
%% Example:
%%      \slideImageText[title=Title]{Image}{Text}
%% params:  templateParams(type=text | diagram, title)[1], image[2], text[3]
\newcommand{\slideImageText}[2][]{
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \pgfkeys{/templateParams/image/.get=\myImage}%
    \IfStrEq{\myType}{diagram}{ \def\localH{c} \def\localV{c}}{ \def\localH{l} \def\localV{t} }

    \begin{frame}[plain]
    \elementTitle[type=half, title=\myTitle] %% Title
    \layoutText[target=body, slicesH=2, targetH=2, halign=\localH, valign=\localV]{#2} %% Text on the Left-box
    \layoutImage[target=body, slicesH=2, targetH=1]{\myImage} %% Image on the Left-box
    \elementBanner
    \end{frame}
}

%% @template Image (Title + Image)
%% Show a title and a full-box image
%% Example:
%%      \slideImage[title=Title]{Image}
%% params:  templateParams(title)[1], image[2]
\newcommand{\slideImage}[2][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/title/.get=\myTitle}%

    \begin{frame}[plain]
    \elementTitle[title=\myTitle] %% Title
    \layoutImage[target=body]{#2} %% Image
    \elementBanner
    \end{frame}
}

%% @template DobleImage (Title + Image + Image)
%% Include a title with two side-by-side images, one on the left and one on the right
%% Example:
%%      \slideDoubleImage[title=Title]{Image1}{Image2}
%% params:  templateParams(title)[1], image1[2], image2[3]
\newcommand{\slideDoubleImage}[3][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/title/.get=\myTitle}%

    \begin{frame}[plain]
    \elementTitle[title=\myTitle] %% Title
    \layoutImage[target=body, slicesH=2, targetH=1]{#2}  %% Image on the Left-box
    \layoutImage[target=body, slicesH=2, targetH=2]{#3} %% Image on the Right-box
    \elementBanner
    \end{frame}
}

%% @template BigImage (Full-Page Big Image)
%% Display a full-page, single image on the whole page
%% Example:
%%      \slideBigImage{Image}
%% params: image[1]
\newcommand{\slideBigImage}[1]{ 
    \resetTemplateParams
    \begin{frame}[plain]
    \layoutImage[target=page]{#1} %% Image on Full-page
    \end{frame}
}

%% @template Quote (Full-Page Big Text)
%% Highlight a full-page, prominent quote
%% Example:
%%      \slideQuote{Quote}
%% params:  quote[1]
\newcommand{\slideQuote}[1]{ 
    \resetTemplateParams

    \begin{frame}[plain]
    \layoutText[target=page, padL=0.4cm, padR=0.2cm, font=big]{#1} 
    \end{frame}
}

%% @template QuoteText (Quote (left) + Text)
%% Pair a larger quote on the left with accompanying text on the right
%% Type=diagram will force centering the diagram in the Text box.
%% Example:
%%      \slideQuoteText[type=diagram]{Quote}{Text}
%% params:  templateParams(type=diagram | text)[1], quote[2], text[3]
\newcommand{\slideQuoteText}[3][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\myType}%
    \IfStrEq{\myType}{diagram}{ \def\localH{c}}{ \def\localH{l}}

    \begin{frame}[plain]
    \layoutText[target=page, slicesH=2, targetH=1, halign=r, valign=c, padL=0.2cm, padR=0.2cm, font=larger]{#2} 
    \layoutText[target=page, slicesH=2, targetH=2, halign=\localH, font=body]{#3} %% Text on the Right-box
    \elementBanner
    \end{frame}
}

%% @template TextQuote (Text + Quote (right))
%% Pair a a text on the left with a larger quote on the right.
%% Type=diagram will force centering the diagram in the Text box.
%% Example:
%%      \slideTextQuote[type=diagram]{Quote}{Text}
%% params:  templateParams(type=text | diagram)[1], quote[2], text[3]
\newcommand{\slideTextQuote}[3][]{
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/type/.get=\myType}%
    \IfStrEq{\myType}{diagram}{ \def\localH{c}}{ \def\localH{l}}

    \begin{frame}[plain]
    \layoutText[target=page, slicesH=2, targetH=2, halign=l, padL=0.2cm, font=larger]{#2}
    \layoutText[target=page, slicesH=2, targetH=1, halign=\localH, padR=0.2cm, font=body]{#3}
    \elementBanner
    \end{frame}
    }

%% @template QA (Quote (Top) + Text)
%% Present a larger quote on top with supporting text at the bottom
%% Example:
%%      \slideQA[question=Could this really work?, answer=A: It all depends}
%% params: question[1], answer[2]
\newcommand{\slideQA}[2]{ 
    \resetTemplateParams

    \begin{frame}[plain]
    \layoutText[target=page, slicesV=2, targetV=1, font=larger]{#1}
    \layoutText[target=page, slicesV=2, targetV=2, font=title]{#2}
    \elementBanner
    \end{frame}
}

%% @template Literature (Big Image (left) + Text + Link)
%% Showcase a larger image on the left, text on the top-right, and a link in the bottom-right
%% Example:
%%      \slideLiterature[title=Title, image=book-cover, link=http://somewhere.com/book]{book-chapters}
%% params: [templateParams(image, link, title}[1], text{2}
\newcommand{\slideLiterature}[2][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/image/.get=\myImage}%
    \pgfkeys{/templateParams/link/.get=\myLink}%
    \pgfkeys{/templateParams/title/.get=\myTitle}%

    \begin{frame}[plain]
    \layoutImage[target=page, slicesH=2, targetH=1, halign=l]{\myImage} 
    \layoutText[target=footer, slicesH=2, targetH=2, font=small]{\myLink} 
    \layoutText[target=header, slicesH=2, targetH=2, halign=l, font=h2]{\myTitle} 
    \layoutText[target=body, slicesH=2, targetH=2, valign=t, padT=0.4cm, valign=t, font=body]{#2} 
    \end{frame}
}



%% @template Template for Definitions (dimensions 2 to 8)
%% Example:
%%      \slideDefinitions[type=text, title=Title, title/1=Title1, ..., title/N=TitleN, text/1=!text-1, ..., text/n=!text-n]
%% params: templateParams{1}
\newcommand{\slideDefinitions}[1][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/color/.get=\myColor}%
    \pgfkeys{/templateParams/font/.get=\myFont}%
    \global\let\partCount\empty

    \foreach \x in {1,2,3,4,5,6,7,8}{%
        \pgfkeys{/templateParams/title/\x/.get=\thisTitle}
        \ifx\thisTitle\empty{\breakforeach}\else{\xdef\partCount{\x}}\fi
    }

    \begin{frame}[plain]
        \elementTitle[title=\myTitle]

        \foreach \i in {1,...,\partCount}{
            \pgfkeys{/templateParams/title/\i/.get=\localTitle}%
            \pgfkeys{/templateParams/text/\i/.get=\localText}%
            \IfStrEq{\myType}{text}{%
                \ifthenelse{\boolean{\myColor}{}}{
                    \ifodd\i
                        \layoutColor[target=body, slicesV=\partCount, targetV=\i, slicesH=3, targetH=1]{fau-shade}
                        \layoutColor[target=body, slicesV=\partCount, targetV=\i, slicesH=3, targetH=2, mergeH=2]{fau-shade}
                    \fi
                }{}
                \layoutText[target=body, slicesV=\partCount, targetV=\i, slicesH=3, targetH=1, font=\myFont]{\localTitle}
            }{
                \layoutImage[target=body, slicesV=\partCount, targetV=\i, slicesH=3, targetH=1, padL=0.2cm, padR=0.3cm]{\localTitle}
            }
            \layoutText[target=body, slicesV=\partCount, targetV=\i, slicesH=3, targetH=2, mergeH=2, halign=l]{\localText} 
        }    
        
        \ifnum\partCount<5 \elementBanner \fi
        \end{frame}
}


%% @template Template for Progress (dimensions 2 to 8)
%% Example:
%%      \slideProgress[type=text, title=Title, title/1=Title1, ..., title/N=TitleN, text/1=!text-1, ..., text/n=!text-n]
%% params: templateParams{1}
\newcommand{\slideProgress}[1][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/color/.get=\myColor}%
    \pgfkeys{/templateParams/font/.get=\myFont}%
    \pgfkeys{/templateParams/arrow/.get=\myArrow}%
    \global\let\partCount\empty

    \foreach \x in {1,2,3,4,5,6,7,8}{%
        \pgfkeys{/templateParams/title/\x/.get=\thisTitle}
        \ifx\thisTitle\empty{\breakforeach}\else{\xdef\partCount{\x}}\fi
    }

    \begin{frame}[plain]
        \elementTitle[title=\myTitle]

        \ifthenelse{\boolean{\myArrow}}{
            \layoutImage[target=body, slicesV=5, targetV=1, padL=0.6cm, keepaspect=false]{arrow-right}
        }{}

        \foreach \i in {1,...,\partCount}{
            \pgfkeys{/templateParams/title/\i/.get=\localTitle}%
            \pgfkeys{/templateParams/text/\i/.get=\localText}%
            \IfStrEq{\myType}{text}{%
                \layoutText[target=body, slicesV=5, targetV=2, slicesH=\partCount, targetH=\i, font=\myFont]{\localTitle}
            }{
                \layoutImage[target=body, slicesV=5, targetV=2, slicesH=\partCount, targetH=\i, font=\myFont]{\localTitle}
            }
            \layoutText[target=body, slicesV=5, targetV=3, mergeV=3, slicesH=\partCount, targetH=\i, valign=t]{\localText}
            %\layoutText[target=body, slicesV=\partCount, targetV=\i, slicesH=3, targetH=2, mergeH=2, halign=l]{\localText} 
        }    
        
   
        \elementBanner
        \end{frame}
}


%% @template Template for Evolution (dimensions 2 to 5)
%% Example:
%%      \slideEvolution[type=text, title=Title, title/1=Title1, ..., title/N=TitleN, text/1=!text-1, ..., text/n=!text-n]
%% params: templateParams{1}
\newcommand{\slideEvolution}[1][]{ 
    \resetTemplateParams
    \pgfkeys{/templateParams/.cd, #1}
    \pgfkeys{/templateParams/title/.get=\myTitle}%
    \pgfkeys{/templateParams/type/.get=\myType}%
    \pgfkeys{/templateParams/color/.get=\myColor}%
    \pgfkeys{/templateParams/font/.get=\myFont}%
    \pgfkeys{/templateParams/arrow/.get=\myArrow}%
    \global\let\partCount\empty

    \foreach \x in {1,2,3,4,5}{%
        \pgfkeys{/templateParams/title/\x/.get=\thisTitle}
        \ifx\thisTitle\empty{\breakforeach}\else{\xdef\partCount{\x}}\fi
    }

    \begin{frame}[plain]
        \elementTitle[title=\myTitle]

        \foreach \i in {1,...,\partCount}{
            \pgfkeys{/templateParams/title/\i/.get=\localTitle}%
            \pgfkeys{/templateParams/text/\i/.get=\localText}%
            \pgfmathsetmacro{\localV}{5 - \i}
            \pgfmathsetmacro{\localVT}{7 - \i}

            \IfStrEq{\myType}{text}{%
                \layoutText[target=body, slicesV=6, targetV=\localV, slicesH=\partCount, targetH=\i, font=\myFont]{\localTitle}
            }{
                \layoutImage[target=body, slicesV=6, targetV=\localV, slicesH=\partCount, targetH=\i, font=\myFont]{\localTitle}
            }
            \layoutText[target=body, slicesV=6, targetV=\localVT, mergeV=\i, slicesH=\partCount, targetH=\i, valign=t]{\localText}
        }    
        
   
        \elementBanner
        \end{frame}
}
